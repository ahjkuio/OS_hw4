Работа по заданию:
1) в kernel/param.h прописываем:
	#define PGSIZE 4096 					  // Размер страницы
	#define MSGBUF_PAGES 1                    // Количество страниц для буфера сообщений
	#define MSGBUFLEN (MSGBUF_PAGES*PGSIZE)   // Размер буфера в байтах
1) Создаем в kernel/ msgbuf.h и msgbuf.c
2) В msgbuf.h прописываем структуру буфера
3) В msgbuf.c реализуем функции:
    msgbufinit- для инициализации таблицы
    pr_msg - функ. форматированного вывода в буфер
    sys_dmesg - копирует содержимое кольцевого буфера kmsgbuf в пользовательский буфер, адрес которого передается как аргумент системного вызова

4) Добавляем системный вызов в kernel/syscall.h
	#define SYS_dmesg  22

5)  Добавляем в kernel/syscall.c
	extern uint64 sys_dmesg(void);
    ...

    static uint64 (*syscalls[])(void) = {
        ...
    [SYS_cmutex]  sys_dmesg,
    };

6) Объявляем в user/user.h:
    int dmesg(char*);

7) Добавляем в user/usys.pl
    entry("dmesg");

9) Проинициализируем msgbuf.c в kernel/defs.h
10) Добавим в kernel/exec.c вызов pr_msg чтобы записывать информацию о запускаемых программах.
11) Добавим инициализацию msgbufinit в kernel/main.c
12) Создаем user/dmesg.c для вывода содержимого буфера. Добавим его в Makefile. 
13) Также в Makefile добавим 
    OBJS = \
        ...
        ...
      $K/msgbuf.o //это в конец
14) Проверяем dmesg. 


Условие:

< СП Д/З No4 Буфер диагностических сообщений я Операционные системы, весна 2024

(1) Создать в ядре глобальный строковый буфер для хранения диагностических сообщений (статический, размером кратным размеру физической страницы памяти - точное количество страниц, отводимое на буфер, задавать с помощью макроса в kernel/param.h). Буфер должен быть реализован по принципу циклической очереди - предусматривать возможность добавления сообщений (в соответствии со следующими заданиями) так, чтобы при достижении конца (последнего байта) буфера, следующие байты записывались в начало буфера. Таким образом, буфер должен сопровождаться указателем на начало и конец данных в буфере (голову и хвост). Кроме того, буфер должен быть защищен спин-замком для обеспечения очередности вывода сообщений при конкурентом доступе. Реализовать функцию записи байта в буфер. Обеспечить необходимую инициализацию структур буфера при старте системы.

(2) Разработать функцию ядра
void pr_msg (const char *fmt, ...);
добавляющую сообщение в буфер, сопровождая его временем, прошедшим от начала запуска системы (ticks). Функция должна поддерживать те же форматы (спецификаторы), которые поддерживаются функцией ядра printf и автоматически добавлять символ перевода строки ( '\n' ) в конце. Например, при вызове в момент времени 354 тиков и значении переменной id 453
pr_ms("id = %d", id);
должно вывести в буфер
[354] id = 453
Учесть, что доступ к ticks следует защищать встроенным в ядро замком.

(3) Разработать системный вызов dmesg, копирующий содержимое буфера диагностических сообщений в заданный пользовательский буфер. Системный вызов должен передавать пользователю нуль-терминированную строку. Реализовать пользовательскую программу dmesg, выводящую содержимое буфера на консоль посредством указанного системного вызова. (По реализации в начале буфера может оставаться конец неполностью удаленного сообщения. Дополнительно можно подумать о том, как сделать так, что вызов dmesg возвращал только с начала строки - например, инициализировать пустой буфер единственным символом '\n' и пропускать все до первого перевода строки).

(4) Протестировать работу утилиты, дополнив системный вызов ехес выводом диагностического сообщения с идентификатором процесса и именем запускаемой программы в буфер. Убедиться в работоспособности буфера в т. ч. при его заполнении.

xv6 is a re-implementation of Dennis Ritchie's and Ken Thompson's Unix
Version 6 (v6).  xv6 loosely follows the structure and style of v6,
but is implemented for a modern RISC-V multiprocessor using ANSI C.

ACKNOWLEDGMENTS

xv6 is inspired by John Lions's Commentary on UNIX 6th Edition (Peer
to Peer Communications; ISBN: 1-57398-013-7; 1st edition (June 14,
2000)).  See also https://pdos.csail.mit.edu/6.1810/, which provides
pointers to on-line resources for v6.

The following people have made contributions: Russ Cox (context switching,
locking), Cliff Frey (MP), Xiao Yu (MP), Nickolai Zeldovich, and Austin
Clements.

We are also grateful for the bug reports and patches contributed by
Takahiro Aoyagi, Marcelo Arroyo, Silas Boyd-Wickizer, Anton Burtsev,
carlclone, Ian Chen, Dan Cross, Cody Cutler, Mike CAT, Tej Chajed,
Asami Doi,Wenyang Duan, eyalz800, Nelson Elhage, Saar Ettinger, Alice
Ferrazzi, Nathaniel Filardo, flespark, Peter Froehlich, Yakir Goaron,
Shivam Handa, Matt Harvey, Bryan Henry, jaichenhengjie, Jim Huang,
Matúš Jókay, John Jolly, Alexander Kapshuk, Anders Kaseorg, kehao95,
Wolfgang Keller, Jungwoo Kim, Jonathan Kimmitt, Eddie Kohler, Vadim
Kolontsov, Austin Liew, l0stman, Pavan Maddamsetti, Imbar Marinescu,
Yandong Mao, Matan Shabtay, Hitoshi Mitake, Carmi Merimovich, Mark
Morrissey, mtasm, Joel Nider, Hayato Ohhashi, OptimisticSide,
phosphagos, Harry Porter, Greg Price, RayAndrew, Jude Rich, segfault,
Ayan Shafqat, Eldar Sehayek, Yongming Shen, Fumiya Shigemitsu, snoire,
Taojie, Cam Tenny, tyfkda, Warren Toomey, Stephen Tu, Alissa Tung,
Rafael Ubal, Amane Uehara, Pablo Ventura, Xi Wang, WaheedHafez,
Keiichi Watanabe, Lucas Wolf, Nicolas Wolovick, wxdao, Grant Wu, x653,
Jindong Zhang, Icenowy Zheng, ZhUyU1997, and Zou Chang Wei.

ERROR REPORTS

Please send errors and suggestions to Frans Kaashoek and Robert Morris
(kaashoek,rtm@mit.edu).  The main purpose of xv6 is as a teaching
operating system for MIT's 6.1810, so we are more interested in
simplifications and clarifications than new features.

BUILDING AND RUNNING XV6

You will need a RISC-V "newlib" tool chain from
https://github.com/riscv/riscv-gnu-toolchain, and qemu compiled for
riscv64-softmmu.  Once they are installed, and in your shell
search path, you can run "make qemu".
